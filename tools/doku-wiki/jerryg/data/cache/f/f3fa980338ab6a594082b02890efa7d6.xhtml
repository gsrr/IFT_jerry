
<h1 class="sectionedit1" id="faq">FAQ</h1>
<div class="level1">
<pre class="file">Q1 : How to checkout remote git tag?
Ans:
1. list all tags --&gt; git tag
2. checkout remote tag --&gt; git checkout &lt;tag_name&gt;
</pre>

</div>
<!-- EDIT1 SECTION "FAQ" [1-157] -->
<h1 class="sectionedit2" id="status">Status</h1>
<div class="level1">
<pre class="file"># git ignore untracked files
git status -uno</pre>

</div>
<!-- EDIT2 SECTION "Status" [158-241] -->
<h1 class="sectionedit3" id="commit">Commit</h1>
<div class="level1">
<pre class="file"># difference for a commit
git diff $commit^ $commit

# list all files in a commit
git diff-tree --no-commit-id --name-only -r $commit

# add a file to last commit and do not change the commit message
git add $file
git commit --amend --no-edit

# modify commit message (before push)
git commit --amend

# modify commit message in cherry-pick
git cherry-pick -e $hash</pre>

</div>
<!-- EDIT3 SECTION "Commit" [242-644] -->
<h1 class="sectionedit4" id="config_related">config related</h1>
<div class="level1">
<pre class="file"># Reference
1. https://ihower.tw/git/basic.html#sec1

# Basic knowledge
Q1: git working tree裡面分為三個區域, working directory, staging area and repository.
Ans:
也就是說, 一開始修改檔案的地方, 叫做working directory.
當執行git add後, 修改後的檔案紀錄就會放到staging area.
當執行git commit後, 檔案紀錄就會被加進repository
(git push就是上傳到remote repository)

# login with escape password
http.proxy=http://userId:pwd%40123@ipaddress:port
</pre>

</div>
<!-- EDIT4 SECTION "config related" [645-1187] -->
<h1 class="sectionedit5" id="merge">Merge</h1>
<div class="level1">
<pre class="file"># cherry-pick with new commit
git cherry-pick -n XXXX

# merge with commits
git checkout master
git merge hotfix # it will merge hotfix branch into master branch with commits.

# merge and write a new commit (discard commits in hotfix branch)
git checkout master
git merge hotfix --squash
</pre>

</div>
<!-- EDIT5 SECTION "Merge" [1188-1512] -->
<h1 class="sectionedit6" id="difference">Difference</h1>
<div class="level1">
<pre class="file"># ignore crlf
1. git diff --ignore-space-at-eol

# Visualize per-character differences diff file?
1. git diff --word-diff-regex=.
2. git diff --color-words=.

# Difference in file
git diff HEAD^^ HEAD main.c

# Difference in commit 
git diff $commit $commit^

# Difference between two branches
        X
        |
        | T
        | |
        | |
        | |
        |/
        B
        |
        |
        S
        
git diff master..topic will show us the difference between X and T
git diff master...topic will show us the difference between B and T</pre>

</div>
<!-- EDIT6 SECTION "Difference" [1513-2109] -->
<h1 class="sectionedit7" id="branch">Branch</h1>
<div class="level1">
<pre class="file"># checkout a remote branch
git pull
git checkout -b test origin/test

# create a local branch
git branch &lt;new_branch_name&gt;

# create a remote branch
git checkout -b &lt;branch-name&gt;
git push &lt;remote-name&gt; &lt;branch-name&gt; or git push &lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;

# remove local branch
git branch -d &lt;branch&gt;

# list all branches (include remote branches)
git branch -a

</pre>

</div>
<!-- EDIT7 SECTION "Branch" [2110-2537] -->
<h1 class="sectionedit8" id="recover">Recover</h1>
<div class="level1">
<pre class="file"># Reset all files in current branch
git fetch --all  # git-fetch - Download objects and refs from another repository
git reset --hard origin/master

# Remove file in staging area
git reset &lt;file&gt;

# Modify the last commit message
git commit --amend

# rollback
git revert $hash  # It will create a new commit automatically.
git push</pre>
<ul>
<li class="level1"><div class="li"> Revert to a specific commit id</div>
</li>
</ul>
<pre class="file">git reset --hard 9bc9775a51432ae4a0ecc57423dd9791a22ea9c0</pre>

</div>
<!-- EDIT8 SECTION "Recover" [2538-] -->