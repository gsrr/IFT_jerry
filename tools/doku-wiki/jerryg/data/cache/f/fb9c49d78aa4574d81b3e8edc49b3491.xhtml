
<h1 class="sectionedit1" id="nvr_command">nvr command</h1>
<div class="level1">
<pre class="file">=&gt;&gt; nvr config -f /tmp -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}

=&gt;&gt; nvr config -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: [{&quot;nvr_version&quot;: &quot;nvr:vms-20170322&quot;, &quot;status&quot;: {&quot;nvr_status&quot;: true, &quot;docker_status&quot;: true}, &quot;container_id&quot;: &quot;5828122a924d0d51a0bf6ef82b5f6970a139ecc9ab55fc5bbb6f9f4529332163&quot;, &quot;enabled&quot;: &quot;True&quot;, &quot;wkfolder&quot;: &quot;/tmp&quot;}]}

=&gt;&gt; nvr disable -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}

=&gt;&gt; nvr enable -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}</pre>

</div>
<!-- EDIT1 SECTION "nvr command" [1-703] -->
<h1 class="sectionedit2" id="docker_command">docker command</h1>
<div class="level1">
<pre class="file"># Docker installation (Centos)
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-centos-7
https://www.phpini.com/linux/rhel-centos-7-install-docker

# basic (Docker —— 從入門到實踐)
https://www.gitbook.com/book/philipzheng/docker_practice/details

# start a docker container
1. docker start [container-id]
or

# running command in docker
docker exec -it [container-id] bash -c &quot;bash /root/nwdt.sh&quot;

# remove a docker container
1. docker stop [container-id]
2. docker rm [container-id]

# Enter a running docker
docker exec -it [container-id] bash

# docker show images
docker images

# docker process
docker ps

# attach container
docker attach 20622f7359cf</pre>

</div>
<!-- EDIT2 SECTION "docker command" [704-1448] -->
<h1 class="sectionedit3" id="container_api">container api</h1>
<div class="level1">
<pre class="file">[Problems]
1. remove docker meta 沒有return value
2. impact if docker load twice, 不行, failover的時候只能做一次.
2.1 那假設原本是在ctrl b跑起來, failover時, 就要換在a的volume跑起來(因為a,b的docker volume是分開的)
2.2 docker delete image , and query image repo name from image file


1. __init__.py

2. init_dckr_service # init docker vg 
  --&gt; appoperator.init_dckr_service(&quot;2BF3E9D70CC1D424&quot;)
  2.1 需先remove docker meta data --&gt; remove_dckr_meta
  --&gt; appoperator.remove_dckr_meta()
  2.2 systemctl start docker
--&gt;
sdg                                     8:96   0   50G  0 disk
├─2BF3E9D70CC1D424-docker--pool_tmeta 253:6    0   52M  0 lvm
│ └─2BF3E9D70CC1D424-docker--pool     253:9    0   10G  0 lvm
├─2BF3E9D70CC1D424-upload_packs       253:7    0   25G  0 lvm   /2BF3E9D70CC1D424/upload_packs
└─2BF3E9D70CC1D424-docker--pool_tdata 253:8    0   10G  0 lvm
  └─2BF3E9D70CC1D424-docker--pool     253:9    0   10G  0 lvm
  
3. img_load --&gt; 可以先使用EonOne進行測試.
  3.1 EonOne path : /usr/local/EonOne/EonOne_2.4.c.02_20170420_1500.dckr.tar
  --&gt; appoperator.img_load(&quot;/usr/local/EonOne/EonOne_2.4.c.02_20170420_1500.dckr.tar&quot;)
  
4. get loaded images 
--&gt; appmonitor.get_images()
{&#039;data&#039;: [{u&#039;Created&#039;: 1492672951,
   u&#039;Id&#039;: u&#039;sha256:47b288ee5e366a38b43598a92c9c0b26c2dc4a3cfd274e18b5a1b2d1f1d0a733&#039;,
   u&#039;Labels&#039;: {u&#039;license&#039;: u&#039;GPLv2&#039;,
    u&#039;name&#039;: u&#039;CentOS Base Image&#039;,
    u&#039;vendor&#039;: u&#039;CentOS&#039;},
   u&#039;ParentId&#039;: u&#039;&#039;,
   u&#039;RepoDigests&#039;: None,
   u&#039;RepoTags&#039;: [u&#039;eonone/base:2.4.c.02_20170420_1500&#039;],
   u&#039;Size&#039;: 849681765,
   u&#039;VirtualSize&#039;: 849681765}],
 &#039;status&#039;: 0}

5. launch container
--&gt; appoperator.cntnr_launch(&quot;eonone/base:2.4.c.02_20170420_1500&quot;)
{&#039;err&#039;: [],
 &#039;out&#039;: [&#039;36fc5d2ac798d45a3f27ab9067c21d25b27b6cf52add4b6f89e0e78676571518&#039;],
 &#039;status&#039;: 0}

6. get launched container
--&gt; appmonitor.get_containers()
{&#039;data&#039;: [{u&#039;Command&#039;: u&quot;/bin/sh -c &#039;nice -n 19 sh ./initSetting.sh &amp;&amp; nice -n 19 /bin/bash&#039;&quot;,
   u&#039;Created&#039;: 1493027281,
   u&#039;HostConfig&#039;: {u&#039;NetworkMode&#039;: u&#039;host&#039;},
   u&#039;Id&#039;: u&#039;36fc5d2ac798d45a3f27ab9067c21d25b27b6cf52add4b6f89e0e78676571518&#039;,
   u&#039;Image&#039;: u&#039;eonone/base:2.4.c.02_20170420_1500&#039;,
   u&#039;ImageID&#039;: u&#039;sha256:47b288ee5e366a38b43598a92c9c0b26c2dc4a3cfd274e18b5a1b2d1f1d0a733&#039;,
   u&#039;Labels&#039;: {u&#039;license&#039;: u&#039;GPLv2&#039;,
    u&#039;name&#039;: u&#039;CentOS Base Image&#039;,
    u&#039;vendor&#039;: u&#039;CentOS&#039;},
   u&#039;Names&#039;: [u&#039;/naughty_joliot&#039;],
   u&#039;NetworkSettings&#039;: {u&#039;Networks&#039;: {u&#039;host&#039;: {u&#039;Aliases&#039;: None,
      u&#039;EndpointID&#039;: u&#039;f410076bff5c707c3325a526e893f220497f484e32bc016bc17ea99133165bc9&#039;,
      u&#039;Gateway&#039;: u&#039;&#039;,
      u&#039;GlobalIPv6Address&#039;: u&#039;&#039;,
      u&#039;GlobalIPv6PrefixLen&#039;: 0,
      u&#039;IPAMConfig&#039;: None,
      u&#039;IPAddress&#039;: u&#039;&#039;,
      u&#039;IPPrefixLen&#039;: 0,
      u&#039;IPv6Gateway&#039;: u&#039;&#039;,
      u&#039;Links&#039;: None,
      u&#039;MacAddress&#039;: u&#039;&#039;,
      u&#039;NetworkID&#039;: u&#039;&#039;}}},
   u&#039;Ports&#039;: [],
   u&#039;Status&#039;: u&#039;Up About a minute&#039;}],
 &#039;status&#039;: 0}

# loop device
loop0                                                                                       7:0    0  100G  0 loop
└─docker-253:1-1112773-pool                                                               253:3    0  100G  0 dm
  └─docker-253:1-1112773-511a29fa52fbc633f66a920ae1189a1a71e460366b94fb90e6a8545dfa6095bd 253:4    0   10G  0 dm
loop1                                                                                       7:1    0    2G  0 loop
└─docker-253:1-1112773-pool                                                               253:3    0  100G  0 dm
  └─docker-253:1-1112773-511a29fa52fbc633f66a920ae1189a1a71e460366b94fb90e6a8545dfa6095bd 253:4    0   10G  0 dm

In [6]: appoperator.docker_using_loopdev()
Out[6]: True</pre>

</div>
<!-- EDIT3 SECTION "container api" [1449-5181] -->
<h1 class="sectionedit4" id="related_commands">Related commands</h1>
<div class="level1">
<pre class="file"># disk
python testHA.py 0 --&gt; show disk information

# create docker volume
def create_docker(HA):
        paras = {}
        paras[&#039;operation&#039;] = &#039;createDocker&#039;
        paras[&#039;vgName&#039;] = &#039;0FD492E13BBD3FBE&#039;
        paras[&#039;lunId&#039;] = &#039;7&#039;
        paras[&#039;lvName&#039;] = &#039;upload_packs&#039;
        paras[&#039;size&#039;] = 26843545600
        paras[&#039;controller&#039;] = &#039;A&#039;
        paras[&#039;serviceId&#039;] = &#039;0&#039;
        ret = HA.callGetLocalFunc(&#039;folderOperation&#039;, paras)
        print ret
        
# destroy docker volume
nascli --&gt; pool destroy 0FD492E13BBD3FBE -z a@0

def destroy_docker(HA):
        paras = {}
        paras[&#039;operation&#039;] = &#039;deletePool&#039;
        paras[&#039;poolname&#039;] = &#039;0FD492E13BBD3FBE&#039;
        paras[&#039;controller&#039;] = &#039;A&#039;
        paras[&#039;serviceId&#039;] = &#039;0&#039;
        ret = HA.callGetLocalFunc(&#039;folderOperation&#039;, paras)
        print ret
</pre>

</div>
<!-- EDIT4 SECTION "Related commands" [5182-6045] -->
<h1 class="sectionedit5" id="waiting_to_do">waiting to do</h1>
<div class="level1">
<pre class="file">App docker volume init  ---&gt; Michael , 4/14
--&gt; done in 2017/04/18 
--&gt; Integrate with app cli --&gt; JerryCheng, 4/19

container status , need to monitor and issue event. --&gt;Jerry.Cheng
write config for app when enabling app function --&gt; Jerry.Cheng

container API --&gt; Yuan , 4/19

NVR and App GUI --&gt; Hugh , 4/26

container-nvr (docker):
1. timezone問題 : map /etc/localtime 給 container使用.
2. container-net mode : host mode , nat mode.
3. </pre>

<p>
<strong><abbr title="specification">spec</abbr> issue</strong>
</p>
<pre class="file">#config_nvr
mount_point = /mp/E/config_nvr

[global]
serial_number=8576145 (4 bytes unsigned integer)
---------------------------------------


Q : share folder給app使用之後, 是否可以再給其他app使用?
Ans:
預設上先不用

Q : docker是跑在單片controller嗎?
Ans:
目前會跑在雙片的controller上, 所以會在兩邊的controller各建一個docker volume.
目前預設會以一個LV的方式, 由其中切出一塊來作為upload package的地方, 另外一塊作為docker使用.
(預設50G --&gt; 20G / 30G)

Q : 那這個docker volume要給使用者看到嗎? (會由NASCLI這邊進行註記或是直接過濾)
1. 是給使用者看到, 但不給操作.
2. 或是不給使用者看到.
3. 過濾要給NASCLI做, 或是給UI做.

1 &amp; 2
Ans:
這個”docker-volume”我認為它應該要讓使用者可以看得到, 但是不讓使用者可以透過file explorer進行操作. -- from Richard

3
Ans:
在Volume list上對這個volume進行標註, 讓UI進行防堵.


Q : 因為docker volume是建在pool上, 那如果pool re-assign的話, 這個volume可能就會沒辦法使用.
Ans:
pool不能夠被re-assign.

Q : 上傳的package已經安裝在NAS裡面的話, 應該要怎麼處理?
Ans:
不管新舊版本的問題, 對docker就是一整個覆蓋過去, 接下來的問題是原來的configuration能不能被新蓋上去的app所接受.
所以,
“2.2 上傳新版 --&gt; NAS 裡面是舊版”, 這個比較沒有問題, 就是更新版本.
“2.1 上傳舊版 --&gt; NAS 裡面是新版”, 這種降版的狀況就需要GUI幫忙做一些處理, 諸如發警告來確認是不是要降版.

Q : 若container fail的話, 要怎麼處理?
1. container fail --&gt; Restart container.
Ans:
Event是一定要發的, 只是要不要自動restart container這件事要考慮一下,
因為如果故障原因不是可以透過restart來解決的話, 例如working folder不見了,
這樣幫使用者自動重開似乎沒有什麼意義.

2. docker volume fail --&gt; Reinstall package and Restart container
Ans:
這個和前一個問題很類似, 我想還是先發event, 另外再考慮在GUI加recover的機制.</pre>

</div>
<!-- EDIT5 SECTION "waiting to do" [6046-8695] -->
<h1 class="sectionedit6" id="nascmd_-_app">nascmd - app</h1>
<div class="level1">
<pre class="file"># upload package --&gt; follow existed method


=&gt;&gt; app init -v vvid -l lunid -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}
1. create a volume for file system (50G)
=&gt;&gt; pool status -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: [{&quot;used&quot;: &quot;33742848&quot;, &quot;name&quot;: &quot;447720D30A9CFC9D&quot;, &quot;uuid&quot;: &quot;fd4aa8f5-6b5a-4f78-8238-e68e4383183b&quot;, &quot;free&quot;: &quot;53627133952&quot;, &quot;fstype&quot;: &quot;xfs&quot;, &quot;member&quot;: [{&quot;driveName&quot;: &quot;sdf&quot;, &quot;used&quot;: &quot;53660876800&quot;, &quot;name&quot;: &quot;d7&quot;, &quot;free&quot;: &quot;0&quot;, &quot;state&quot;: &quot;active&quot;, &quot;useless&quot;: &quot;26214400&quot;, &quot;serial&quot;: &quot;447720D30A9CFC9D&quot;}], &quot;cluster&quot;: false, &quot;state&quot;: &quot;active&quot;, &quot;peSize&quot;: &quot;4096&quot;, &quot;folderNum&quot;: &quot;1&quot;, &quot;owner&quot;: &quot;A&quot;, &quot;type&quot;: &quot;user&quot;, &quot;utility&quot;: &quot;1.00&quot;}]}

2. pool destroy volume (clear volume)
=&gt;&gt; pool destroy &quot;447720D30A9CFC9D&quot; -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [{&quot;code&quot;: &quot;0x051200A9&quot;, &quot;Params&quot;: []}], &quot;data&quot;: []}

3. create docker volume
=&gt;&gt; app init -v 447720D30A9CFC9D -l 7 -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0001&quot;, &quot;CLI&quot;: &quot;Failed (general)&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}

4. lsblk
sdf                                                                                            8:80   0   50G  0 disk
└─79AB37B35236D591-upload_packs                                                              253:7    0   25G  0 lvm   /79AB37B35236D591/upload_packs


=&gt;&gt; app preinstall -z a@0 -n test-1.0-1.x86_64.rpm
=&gt;&gt; {&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: [{&quot;Group&quot;: &quot;develope&quot;, &quot;Name&quot;: &quot;nvr&quot;, &quot;License&quot;: &quot;GPL&quot;, &quot;Relocations&quot;: &quot;/tmp&quot;, &quot;Install Date&quot;: &quot;(not installed)&quot;, &quot;Build Host&quot;: &quot;CentOS7-Build&quot;, &quot;Description&quot;: &quot;&quot;, &quot;Summary&quot;: &quot;NVR App&quot;, &quot;Source RPM&quot;: &quot;nvr-1.0-1.src.rpm&quot;, &quot;Version&quot;: &quot;1.0&quot;, &quot;Architecture&quot;: &quot;x86_64&quot;, &quot;Signature&quot;: &quot;(none)&quot;, &quot;Release&quot;: &quot;1&quot;, &quot;Vendor&quot;: &quot;Infortrend&quot;, &quot;Packager&quot;: &quot;jerry.cheng &lt;jerry.cheng@infortrend.com&gt;&quot;, &quot;Size&quot;: &quot;840663552&quot;, &quot;Build Date&quot;: &quot;Fri 31 Mar 2017 06:06:58 AM GMT&quot;}]}

=&gt;&gt; app install -n nvr-1.0-1.x86_64.rpm -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}
 # rpm install # deploy file
 # call docker to import dockfile
 # remove installed file (nvr)

=&gt;&gt; app uninstall -n nvr -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}
 # call docker to export docker file
 # rpm uninstall
 # no need to clean files in share folder

=&gt;&gt; app config -n nvr -p eyJmb2xkZXIiOiAiL1Bvb2wtMS9mMSJ9 -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}
# set config for app

=&gt;&gt; app enable -n nvr -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}
# call docker to run docker file

=&gt;&gt; app disable -n nvr -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: []}
# call docker to kill docker process

=&gt;&gt; app list -z a@0
{&quot;cliCode&quot;: [{&quot;Return&quot;: &quot;0x0000&quot;, &quot;CLI&quot;: &quot;Successful&quot;}], &quot;returnCode&quot;: [], &quot;data&quot;: [{&quot;installed&quot;: true, &quot;version&quot;: &quot;1.0&quot;, &quot;config&quot;: {&quot;enable&quot;: &quot;True&quot;, &quot;name&quot;: &quot;nvr&quot;, &quot;ctrl&quot;: &quot;A&quot;, &quot;package&quot;: &quot;nvr-1.0-1.x86_64.rpm&quot;, &quot;version&quot;: &quot;1.0&quot;, &quot;docker_vol&quot;: &quot;/Pool-1/f1/rpms&quot;, &quot;folder&quot;: &quot;/Pool-1/f1&quot;}, &quot;name&quot;: &quot;nvr&quot;, &quot;package&quot;: &quot;nvr-1.0-1.x86_64.rpm&quot;}]}</pre>

<p>
<img src="/jerryg/lib/plugins/graphviz/img.php?width=800&amp;height=400&amp;layout=dot&amp;align=right&amp;version=2016-02-03&amp;md5=7f68a5aa1a195c0c481f90b3dcb42ff4" class="mediaright" alt="" width="800" height="400" align="right"/>
</p>

</div>
<!-- EDIT6 SECTION "nascmd - app" [8696-] -->