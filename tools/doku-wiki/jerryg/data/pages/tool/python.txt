  * [[tool:python:time_module|Usage of time module]]
====== get reference count from gdb ======
<file>
The reference count of each and every object is stored in the PyObject itself, in a variable called ob_refcnt.

typedef struct _object {
    _PyObject_HEAD_EXTRA
    Py_ssize_t ob_refcnt;          # Reference count
    struct _typeobject *ob_type;
} PyObject;

(gdb) info locals
sp = 0x7fe6c054c1e8
stack_pointer = <optimized out>
next_instr = <optimized out>
opcode = <optimized out>
oparg = <optimized out>
why = WHY_NOT
err = 0
x = <optimized out>
v = <optimized out>
w = <optimized out>
u = <optimized out>
t = <optimized out>
stream = 0x0
fastlocals = 0x7fe6c054c1c8
freevars = <optimized out>
retval = <optimized out>
tstate = <optimized out>
co = <optimized out>
instr_ub = -1
instr_lb = 0
instr_prev = -1
first_instr = <optimized out>
names = <optimized out>
consts = <optimized out>
(gdb) print fastlocals
$6 = (PyObject **) 0x7fe6c054c1c8
(gdb) print *fastlocals
$7 = <HAServer(setInfoLock={'NFSInfo': <thread.lock at remote 0x7fe6c0996730>, 'WEBDAVInfo': <thread.lock at remote 0x7fe6c09967f0>, 'FTPInfo': <thread.lock at remote 0x7fe6c09968f0>, 'ServiceInfo': <thread.lock at remote 0x7fe6c09968d0>, 'MonitorInfo': <thread.lock at remote 0x7fe6c0996970>, 'DiskInfo': <thread.lock at remote 0x7fe6c0996dd0>, 'ShareInfo': <thread.lock at remote 0x7fe6c06c1230>, 'MDInfo': <thread.lock at remote 0x7fe6c06c15b0>, 'AvInfo': <thread.lock at remote 0x7fe6c06c1410>, 'SystemInfo': <thread.lock at remote 0x7fe6c0996c30>, 'LVMInfo': <thread.lock at remote 0x7fe6c0996cf0>, 'UserInfo': <thread.lock at remote 0x7fe6c0996d30>, 'RSYNCDInfo': <thread.lock at remote 0x7fe6c0996870>, 'AFPInfo': <thread.lock at remote 0x7fe6c0996c50>, 'PasswdManageInfo': <thread.lock at remote 0x7fe6c0996d90>, 'NetworkInfo': <thread.lock at remote 0x7fe6c0996f10>, 'CIFSInfo': <thread.lock at remote 0x7fe6c06c1210>}, g_bgjobList=[], infoLocal={'NFSInfo': <NFSInfo(updateTime=<datetime.datetime at remote 0x7fe6c767c78...(truncated)
(gdb) print *(*fastlocals)
$8 = {ob_refcnt = 26, ob_type = 0x241feb0}
</file>

====== id and di ======
<file>
import _ctypes

def di(obj_id):
    """ Inverse of id() function. """
    return _ctypes.PyObj_FromPtr(obj_id)

if __name__ == '__main__':
    a = 42
    b = 'answer'
    print(di(id(a)))  # -> 42
    print(di(id(b)))  # -> answer
    
<file>
====== unix domain socket ======
<file>
# server.py
import socket
import sys
import os

server_address = './uds_socket'

try:
    os.unlink(server_address)
except OSError:
    if os.path.exists(server_address):
        raise

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
print >>sys.stderr, 'starting up on %s' % server_address
sock.bind(server_address)
sock.listen(1)

while True:
    print >>sys.stderr, 'waiting for a connection'
    connection, client_address = sock.accept()
    try:
        print >>sys.stderr, 'connection from', client_address

        while True:
            data = connection.recv(16)
            print >>sys.stderr, 'received "%s"' % data
            if data:
                print >>sys.stderr, 'sending data back to the client'
                connection.sendall(data)
            else:
                print >>sys.stderr, 'no more data from', client_address
                break
    finally:
        connection.close()
        
# client.py
import socket
import sys

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

# Connect the socket to the port where the server is listening
server_address = './uds_socket'
print >>sys.stderr, 'connecting to %s' % server_address
try:
    sock.connect(server_address)
except socket.error, msg:
    print >>sys.stderr, msg
    sys.exit(1)
try:

    # Send data
    message = 'This is the message.  It will be repeated.'
    print >>sys.stderr, 'sending "%s"' % message
    sock.sendall(message)

    amount_received = 0
    amount_expected = len(message)

    while amount_received < amount_expected:
        data = sock.recv(16)
        amount_received += len(data)
        print >>sys.stderr, 'received "%s"' % data
except Exception as ex:
        print type(ex), ex.args

finally:
    print >>sys.stderr, 'closing socket'
    sock.close()
    
# socket file is not exist
[root@gsnas_a unix]# python client.py
connecting to ./uds_socket
[Errno 2] No such file or directory
</file>

====== socket exception ======
<file>
#client code
import socket
import traceback
import sys

try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_address = ('localhost', 10000)
        sock.connect(server_address)
except Exception as ex:
        print type(ex), ex.args

# Server is not open
[root@gsnas_a ~]# python client.py
<class 'socket.error'> (111, 'Connection refused') 

# Server close socket
[root@gsnas_a ~]# python client.py
<class 'socket.error'> (104, 'Connection reset by peer')


# raise exception
import socket
import traceback
import sys
import time

try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_address = ('localhost', 10000)
        raise Exception,(1,"error"), sys.exc_info()[2]
        sock.connect(server_address)
        sock.close()
except Exception as ex:
        print type(ex), ex.args, ex.errno
        print traceback.format_tb(sys.exc_info()[2])
</file>

====== struct.pack ======
<file>
# pack string (char array)
>>> s1 = struct.pack("I9sI", 12, "Eononestr", 11)
>>> s1
'\x0c\x00\x00\x00Eononestr\x00\x00\x00\x0b\x00\x00\x00'
>>> struct.unpack("I9sI", s1)
(12, 'Eononestr', 11)

>>> struct.unpack("I8sI",s2)
(12, 'Eononest', 11)
>>> s2 = struct.pack("I", 12) + "Eononest" + struct.pack("I", 11)
>>> s2
'\x0c\x00\x00\x00Eononest\x0b\x00\x00\x00'
>>> struct.unpack("I8sI",s2)
(12, 'Eononest', 11)
(The packet should be padded if the char array is not divided by 2)
</file>

====== trace module ======
[[https://pymotw.com/2/trace/]]
<file>
# For a simple list of the functions called
python -m trace --listfuncs trace_example/main.py
</file>
====== object analysis======
  * vars(object) , but not all objects have a __dict__ member
  * dir(object)
  * getattr()
  * type()
  * 
<file>
def dump(obj):
  for attr in dir(obj):
    print "obj.%s = %s" % (attr, getattr(obj, attr))
</file> 