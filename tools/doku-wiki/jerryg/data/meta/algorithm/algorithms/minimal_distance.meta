a:2:{s:7:"current";a:7:{s:4:"date";a:2:{s:7:"created";i:1494735667;s:8:"modified";i:1494735667;}s:11:"last_change";a:8:{s:4:"date";i:1494735667;s:2:"ip";s:14:"10.141.141.104";s:4:"type";s:1:"C";s:2:"id";s:37:"algorithm:algorithms:minimal_distance";s:4:"user";s:0:"";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";s:10:"sizechange";i:525;}s:4:"user";s:0:"";s:7:"creator";s:0:"";s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:11:"description";a:1:{s:8:"abstract";s:503:"class Solution(object):
    def minDistance(self, A, B):
        memo = {}
        def dp(i, j):
            #min steps to make A[i:] and B[j:] the same
            if i == len(A) or j == len(B):
                return len(A) - i + len(B) - j
            if (i,j ) not in memo:
                if A[i] == B[j]:
                    ans= dp(i+1,j+1)
                else:
                    ans= 1 + min(dp(i+1, j), dp(i, j+1))
                memo[i,j]= ans
            return memo[i,j]
        returâ€¦";}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1494735667;}s:11:"last_change";a:8:{s:4:"date";i:1494735667;s:2:"ip";s:14:"10.141.141.104";s:4:"type";s:1:"C";s:2:"id";s:37:"algorithm:algorithms:minimal_distance";s:4:"user";s:0:"";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";s:10:"sizechange";i:525;}s:4:"user";s:0:"";s:7:"creator";s:0:"";}}