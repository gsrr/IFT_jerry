a:2:{s:7:"current";a:7:{s:4:"date";a:2:{s:7:"created";i:1493592307;s:8:"modified";i:1493592678;}s:11:"last_change";a:8:{s:4:"date";i:1493592678;s:2:"ip";s:14:"10.141.141.113";s:4:"type";s:1:"E";s:2:"id";s:33:"algorithm:algorithms:findanagrams";s:4:"user";s:0:"";s:3:"sum";s:0:"";s:5:"extra";s:0:"";s:10:"sizechange";i:408;}s:4:"user";s:0:"";s:7:"creator";s:0:"";s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:11:"description";a:1:{s:8:"abstract";s:392:"def checkInclusion(self, s1, s2):
    A = [ord(x) - ord('a') for x in s1]
    B = [ord(x) - ord('a') for x in s2]
    
    target = [0] * 26
    for x in A:
        target[x] += 1
    
    window = [0] * 26
    for i, x in enumerate(B):
        window[x] += 1
        if i >= len(A):
            window[B[i - len(A)]] -= 1
        if window == target:
            return True
    return False";}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:2:{s:7:"created";i:1493592307;s:8:"modified";i:1493592678;}s:11:"last_change";a:8:{s:4:"date";i:1493592678;s:2:"ip";s:14:"10.141.141.113";s:4:"type";s:1:"E";s:2:"id";s:33:"algorithm:algorithms:findanagrams";s:4:"user";s:0:"";s:3:"sum";s:0:"";s:5:"extra";s:0:"";s:10:"sizechange";i:408;}s:4:"user";s:0:"";s:7:"creator";s:0:"";}}