a:2:{s:7:"current";a:7:{s:4:"date";a:2:{s:7:"created";i:1493594994;s:8:"modified";i:1493595268;}s:11:"last_change";a:8:{s:4:"date";i:1493595268;s:2:"ip";s:14:"10.141.141.113";s:4:"type";s:1:"E";s:2:"id";s:39:"algorithm:algorithms:reshape_the_matrix";s:4:"user";s:0:"";s:3:"sum";s:0:"";s:5:"extra";s:0:"";s:10:"sizechange";i:-56;}s:4:"user";s:0:"";s:7:"creator";s:0:"";s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:11:"description";a:1:{s:8:"abstract";s:503:"class Solution(object):
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        if len(nums) == 0:
            return nums
        nr,nc = len(nums), len(nums[0])
        if nr * nc != r * c:
            return nums
        new_nums = [[0] * c for i in xrange(r)]
        for i in xrange(nr * nc):
            new_nums[i / c][i % c] = nums[i / nc][i % nc]
        return neâ€¦";}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:2:{s:7:"created";i:1493594994;s:8:"modified";i:1493595268;}s:11:"last_change";a:8:{s:4:"date";i:1493595268;s:2:"ip";s:14:"10.141.141.113";s:4:"type";s:1:"E";s:2:"id";s:39:"algorithm:algorithms:reshape_the_matrix";s:4:"user";s:0:"";s:3:"sum";s:0:"";s:5:"extra";s:0:"";s:10:"sizechange";i:-56;}s:4:"user";s:0:"";s:7:"creator";s:0:"";}}