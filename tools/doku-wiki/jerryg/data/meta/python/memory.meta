a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1501144262;s:8:"modified";i:1501234232;}s:11:"last_change";a:8:{s:4:"date";i:1501234232;s:2:"ip";s:12:"172.27.12.71";s:4:"type";s:1:"E";s:2:"id";s:13:"python:memory";s:4:"user";s:0:"";s:3:"sum";s:0:"";s:5:"extra";s:0:"";s:10:"sizechange";i:115;}s:4:"user";s:0:"";s:7:"creator";s:0:"";s:5:"title";s:9:"Reference";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:9:"reference";s:5:"title";s:9:"Reference";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:513:"Reference


https://docs.python.org/2/c-api/index.html



All Python objects (even Python integers) have a type and a reference count.
An object’s type determines what kind of object it is
"reference count" counts how many different places there are that have a reference to an object.

It’s that you’ve created 5 million integers simultaneously alive, and each int object consumes 12 bytes. “For speed”, Python maintains an internal free list for integer objects. Unfortunately, that free list is bo…";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:2:{s:7:"created";i:1501144262;s:8:"modified";i:1501234232;}s:11:"last_change";a:8:{s:4:"date";i:1501234232;s:2:"ip";s:12:"172.27.12.71";s:4:"type";s:1:"E";s:2:"id";s:13:"python:memory";s:4:"user";s:0:"";s:3:"sum";s:0:"";s:5:"extra";s:0:"";s:10:"sizechange";i:115;}s:4:"user";s:0:"";s:7:"creator";s:0:"";}}